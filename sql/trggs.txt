CREATE DATABASE KEEPSAKE;
GO


USE KEEPSAKE;
GO

CREATE TABLE PATIENT_INFORMATION (
    PT_ID INT NOT NULL PRIMARY KEY,
    PT_LNAME VARCHAR(30) NOT NULL,
    PT_FNAME VARCHAR(20) NOT NULL,
    PT_MNAME VARCHAR(20) NULL,
    DT_OF_BIRTH DATETIME NOT NULL,
    MT_NAME VARCHAR(60) NULL,
    FT_NAME VARCHAR(60) NULL,
    CON_NUM VARCHAR(60) NULL,
    EMAIL_ADD VARCHAR(60) NULL
);

CREATE TABLE DOCTOR (
    DR_ID INT NOT NULL PRIMARY KEY,
    DR_NAME VARCHAR(60) NOT NULL,
    DEPPT VARCHAR(60) NOT NULL,
    SPLTY VARCHAR(30) NOT NULL,
    CONTACT VARCHAR(15) NULL
);

CREATE TABLE ACCOUNTS (
    USER_ID INT NOT NULL PRIMARY KEY,
    USERTYPE BIT NOT NULL,
    PASSWORD VARCHAR(15) NOT NULL,
    EMP_ID CHAR(15) NULL,
    USER_LNAME VARCHAR(60) NOT NULL,
    USER_FNAME VARCHAR(60) NOT NULL
);

CREATE TABLE PRESCRIPTIONS (
    RX_ID INT NOT NULL PRIMARY KEY,
    CU_TYPE TINYINT NOT NULL,
    [DATE] DATETIME NOT NULL,
    AGE INT NOT NULL,
    FINDINGS NVARCHAR(MAX) NOT NULL,
    CONSULT NVARCHAR(MAX) NULL,
    DR_INS NVARCHAR(MAX) NOT NULL,
    RETURN_DT DATETIME NULL,
    PT_ID INT REFERENCES PATIENT_INFORMATION(PT_ID),
    DR_ID INT REFERENCES DOCTOR(DR_ID)
);

CREATE TABLE ATPMC_MSRMT (
    AM_ID INT NOT NULL PRIMARY KEY,
    WEIGHT FLOAT NOT NULL,
    LENGTH FLOAT NOT NULL,
    HEAD_CC FLOAT NOT NULL,
    CHEST_CC FLOAT NOT NULL,
    ABDML_GT FLOAT NOT NULL,
    PT_ID INT REFERENCES PATIENT_INFORMATION(PT_ID),
    RX_ID INT REFERENCES PRESCRIPTIONS(RX_ID)
);

CREATE TABLE SCREENING_TEST (
    ST_ID INT NOT NULL PRIMARY KEY,
    ENS_DATE DATE NOT NULL,
    ENS_REMARKS BIT NOT NULL,
    NHS_DATE DATE NOT NULL,
    NHS_REAR BIT NOT NULL,
    POS_CCHD_LEAR BIT NOT NULL,
    POS_CCHD_DATE DATE NULL,
    POS_CCHD_RHAND BIT NOT NULL,
    POS_CCHD_LHAND BIT NOT NULL,
    ROR_DATE DATE NULL,
    ROR_REMARKS VARCHAR(60) NULL,
    PT_ID INT REFERENCES PATIENT_INFORMATION(PT_ID)
);

CREATE TABLE IMMUNIZATION_RECORD (
    VAX_ID INT NOT NULL PRIMARY KEY,
    VAX VARCHAR(60) NOT NULL,
    DOSAGE FLOAT NOT NULL,
    [DATE] DATE NOT NULL,
    REMARKS NVARCHAR(MAX) NULL,
    PT_ID INT REFERENCES PATIENT_INFORMATION(PT_ID),
    DR_ID INT REFERENCES DOCTOR(DR_ID)
);

CREATE TABLE PATIENT_IMMUNIZATION (
    PI_ID INT NOT NULL PRIMARY KEY,
    PT_ID INT REFERENCES PATIENT_INFORMATION(PT_ID),
    VAX_ID INT REFERENCES IMMUNIZATION_RECORD(VAX_ID)
);

--TRIGGERS
CREATE TRIGGER TRG_DOCTOR_UNIQUECONTACT
ON DOCTOR
INSTEAD OF INSERT, UPDATE
AS
BEGIN
    IF EXISTS (
        SELECT 1 
        FROM DOCTOR D
        JOIN INSERTED I ON D.CONTACT = I.CONTACT
        WHERE I.DR_ID <> D.DR_ID
    )
    BEGIN
        RAISERROR ('CONTACT NUMBER MUST BE UNIQUE FOR EACH DOCTOR.', 16, 1);
        ROLLBACK TRANSACTION;
    END
    ELSE
    BEGIN
        IF EXISTS (SELECT 1 FROM INSERTED)
            INSERT INTO DOCTOR (DR_ID, DR_NAME, DEPPT, SPLTY, CONTACT)
            SELECT DR_ID, DR_NAME, DEPPT, SPLTY, CONTACT FROM INSERTED;
        IF EXISTS (SELECT 1 FROM DELETED)
            DELETE FROM DOCTOR WHERE DR_ID IN (SELECT DR_ID FROM DELETED);
    END
END;


CREATE TRIGGER TRG_UPDATEPATIENTIMMUNIZATION
ON IMMUNIZATION_RECORD	
AFTER UPDATE
AS
BEGIN
    UPDATE PATIENT_IMMUNIZATION
    SET VAX_ID = I.VAX_ID
    FROM PATIENT_IMMUNIZATION PI
    JOIN INSERTED I ON PI.VAX_ID = I.VAX_ID;
END;


CREATE TRIGGER TRG_VALIDATEPATIENTFORPRESCRIPTION
ON PRESCRIPTIONS
AFTER INSERT
AS
BEGIN
    IF EXISTS (
        SELECT 1
        FROM INSERTED I
        LEFT JOIN PATIENT_INFORMATION P ON I.PT_ID = P.PT_ID
        WHERE P.PT_ID IS NULL
    )
    BEGIN
        RAISERROR ('INVALID PT_ID. THE PATIENT DOES NOT EXIST.', 16, 1);
        ROLLBACK TRANSACTION;
    END;
END;


CREATE TRIGGER TRG_CALCULATEPATIENTAGE
ON PRESCRIPTIONS
AFTER INSERT
AS
BEGIN
    
    UPDATE P
    SET AGE = DATEDIFF(YEAR, PI.DT_OF_BIRTH, GETDATE())
    FROM PRESCRIPTIONS P
    JOIN INSERTED I ON P.RX_ID = I.RX_ID
    JOIN PATIENT_INFORMATION PI ON I.PT_ID = PI.PT_ID;
END;



CREATE TABLE IMMUNIZATION_LOG (
    LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
    VAX_ID INT,
    VAX VARCHAR(60),
    DOSAGE FLOAT,
    [DATE] DATE,
    REMARKS NVARCHAR(MAX),
    ACTION_TYPE VARCHAR(10), -- INSERT, UPDATE, DELETE
    ACTION_TIMESTAMP DATETIME DEFAULT GETDATE()
);

CREATE TRIGGER TRG_LOGIMMUNIZATIONCHANGES
ON IMMUNIZATION_RECORD
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    IF EXISTS (SELECT 1 FROM INSERTED)
    BEGIN
        INSERT INTO IMMUNIZATION_LOG (VAX_ID, VAX, DOSAGE, [DATE], REMARKS, ACTION_TYPE)
        SELECT VAX_ID, VAX, DOSAGE, [DATE], REMARKS, 'INSERT'
        FROM INSERTED;
    END;

    IF EXISTS (SELECT 1 FROM DELETED)
    BEGIN
        INSERT INTO IMMUNIZATION_LOG (VAX_ID, VAX, DOSAGE, [DATE], REMARKS, ACTION_TYPE)
        SELECT VAX_ID, VAX, DOSAGE, [DATE], REMARKS, 'DELETE'
        FROM DELETED;
    END;
END;


CREATE TRIGGER TRG_VALIDATEMEASUREMENTS
ON ATPMC_MSRMT
INSTEAD OF INSERT, UPDATE
AS
BEGIN
    IF EXISTS (
        SELECT 1
        FROM INSERTED
        WHERE WEIGHT < 0 OR LENGTH < 0 OR HEAD_CC < 0 OR CHEST_CC < 0 OR ABDML_GT < 0
    )
    BEGIN
        RAISERROR ('MEASUREMENTS CANNOT BE NEGATIVE.', 16, 1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;

    
    IF EXISTS (SELECT 1 FROM INSERTED)
    BEGIN
        
        INSERT INTO ATPMC_MSRMT (AM_ID, WEIGHT, LENGTH, HEAD_CC, CHEST_CC, ABDML_GT, PT_ID, RX_ID)
        SELECT AM_ID, WEIGHT, LENGTH, HEAD_CC, CHEST_CC, ABDML_GT, PT_ID, RX_ID
        FROM INSERTED;
    END;

    IF EXISTS (SELECT 1 FROM DELETED)
    BEGIN
        
        UPDATE ATPMC_MSRMT
        SET WEIGHT = i.WEIGHT,
            LENGTH = i.LENGTH,
            HEAD_CC = i.HEAD_CC,
            CHEST_CC = i.CHEST_CC,
            ABDML_GT = i.ABDML_GT,
            PT_ID = i.PT_ID,
            RX_ID = i.RX_ID
        FROM INSERTED i
        WHERE ATPMC_MSRMT.AM_ID = i.AM_ID;
    END;
END;

